<?php

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 *
 * This example does not use the
 * @link http://drupal.org/project/entity Entity API module @endlink, which is
 * used by many entity implementations and is recommended by many.
 *
 * An example of use of creating and managing entities using the Entity API
 * module is provided in the
 * @link http://drupal.org/project/model Model Entity module @endlink.
 *
 * @todo: Reference the ronald_istos article series
 * @todo: Reference the Drupal module development book
 * @todo: Add a single field
 */


/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function entity_example_entity_info() {
  $info['entity_example_basic'] = array(
    // A human readable label to identify our entity.
    'label' => t('Example Basic Entity'),

    // The controller for our Entity, extending the Drupal core controller.
    // This class is defined below
    'controller class' => 'EntityExampleBasicController',

    // The table for this entity defined in hook_schema()
    // This table is created in entity_example.install
    'base table' => 'entity_example_basic',

    // Returns the uri elements of an entity
    // This very short function is defined below.
    'uri callback' => 'entity_example_basic_uri',

    // IF fieldable == FALSE, we can't attach fields.
    // I wonder if this is "free" (and should always be TRUE) or is expensive in storage or performance
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key (typically vid) is omitted.
    //
    // Note columns 'basic_id' and 'bundle_type' are defined in int .install file.
    // 'basic_id' is the primary key of table 'entity_example_basic'.
    // I wonder if 'entity keys' here means a compound key
    'entity keys' => array(
      'id'     => 'basic_id',   // The 'id' (basic_id here) is the unique id.
      'bundle' => 'bundle_type' // Bundle will be determined by the 'bundle_type' field
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    // Why not always TRUE?  Maybe FALSE for trouble-shooting caching issues.
    'static cache' => TRUE,

    // Bundles are ALTERNATIVE groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'first_example_bundle' => array(
        'label' => 'First example bundle',
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          // The path 'admin/structure/entity_example_basic/manage' is defined in our hook_menu below
          'path'             => 'admin/structure/entity_example_basic/manage',
          'access arguments' => array('administer entity_example_basic entities'),
        ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    // This is handled in entity_example_basic_view($entity, $view_mode = 'tweaky') below
    'view modes' => array(
      'tweaky' => array(
        'label'           => t('Tweaky'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $info;
}


/**
 * Implements hook_menu().
 */
function entity_example_menu() {
  $items['examples/entity_example'] = array(
    'title'            => 'Entity Example',
    'page callback'    => 'entity_example_info_page',     // Defined below
    'access arguments' => array('view any entity_example_basic entity'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/entity_example_basic/manage'] = array(
    'title'            => 'Administer entity_example_basic entity type',
    'page callback'    => 'entity_example_basic_admin_page',                 // Defined below
    'access arguments' => array('administer entity_example_basic entities'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  // Since using %entity_example_basic arg we do an automatic call to entity_example_basic_load
  // and pass that as an arg to 'page callback' entity_example_basic_view
  // ArgNums: 0          1           2        3
  $items['examples/entity_example/basic/%entity_example_basic'] = array(
    'title callback'   => 'entity_example_basic_title',                 // Defined below
    'title arguments'  => array(3),    // %entity_example_basic
    'page callback'    => 'entity_example_basic_view',                  // View is default local task below
    'page arguments'   => array(3),    // %entity_example_basic
    'access arguments' => array('view any entity_example_basic entity'),
  );

  // 'View' tab for an individual entity page.
  $items['examples/entity_example/basic/%entity_example_basic/view'] = array(
    'title'  => 'View',
    'type'   => MENU_DEFAULT_LOCAL_TASK,   // Default local task for path examples/entity_example/basic/%entity_example_basic
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  //  ArgNum  0          1          2           3
  $items['examples/entity_example/basic/%entity_example_basic/edit'] = array(
    'title'            => 'Edit',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('entity_example_basic_form', 3),          // Defined below, 3 is URL arg number => passes loaded object
    'access arguments' => array('edit any entity_example_basic entity'),
    'type'             => MENU_LOCAL_TASK,
  );

  // Add example entities.
  $items['examples/entity_example/basic/add'] = array(
    'title'            => 'Add an Entity Example Basic Entity',
    'page callback'    => 'entity_example_basic_add',                    // Defined below. No magic-arg-loaded-obj since we're adding new
    'access arguments' => array('create entity_example_basic entities'),
  );

  return $items;
}

/**
 * Basic information for the page.
 */
function entity_example_info_page() {
  $content['preface'] = array(
    '#type'   => 'item',
    '#markup' => t('The entity example provides a simple example entity.')
  );
  if (user_access('administer entity_example_basic entities')) {
    $content['preface']['#markup'] =  t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/entity_example_basic/manage'))
    );
  }
  $content['table'] = entity_example_basic_list_entities();  // defined below

  return $content;
}


/**
 * Returns a render array with all entity_example_basic entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function entity_example_basic_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = entity_example_basic_load_multiple();
  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id'               => $entity->basic_id,
          'item_description' => l($entity->item_description, 'examples/entity_example/basic/' . $entity->basic_id),
          'bundle'           => $entity->bundle_type,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme'  => 'table',
      '#rows'   => $rows,
      '#header' => array(t('ID'), t('Item Description'), t('Bundle')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type'   => 'item',
      '#markup' => t('No entity_example_basic entities currently exist.'),
    );
  }
  return $content;
}




