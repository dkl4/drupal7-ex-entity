<?php

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 *
 * This example does not use the
 * @link http://drupal.org/project/entity Entity API module @endlink, which is
 * used by many entity implementations and is recommended by many.
 *
 * An example of use of creating and managing entities using the Entity API
 * module is provided in the
 * @link http://drupal.org/project/model Model Entity module @endlink.
 *
 * @todo: Reference the ronald_istos article series
 * @todo: Reference the Drupal module development book
 * @todo: Add a single field
 */


/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function entity_example_entity_info() {
  $info['entity_example_basic'] = array(
    // A human readable label to identify our entity.
    'label' => t('Example Basic Entity'),

    // The controller for our Entity, extending the Drupal core controller.
    // This class is defined below
    'controller class' => 'EntityExampleBasicController',

    // The table for this entity defined in hook_schema()
    // This table is created in entity_example.install
    'base table' => 'entity_example_basic',

    // Returns the uri elements of an entity
    // This very short function is defined below.
    'uri callback' => 'entity_example_basic_uri',

    // IF fieldable == FALSE, we can't attach fields.
    // I wonder if this is "free" (and should always be TRUE) or is expensive in storage or performance
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key (typically vid) is omitted.
    //
    // Note columns 'basic_id' and 'bundle_type' are defined in int .install file.
    // 'basic_id' is the primary key of table 'entity_example_basic'.
    // I wonder if 'entity keys' here means a compound key
    'entity keys' => array(
      'id'     => 'basic_id',   // The 'id' (basic_id here) is the unique id.
      'bundle' => 'bundle_type' // Bundle will be determined by the 'bundle_type' field
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    // Why not always TRUE?  Maybe FALSE for trouble-shooting caching issues.
    'static cache' => TRUE,

    // Bundles are ALTERNATIVE groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'first_example_bundle' => array(
        'label' => 'First example bundle',
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          // The path 'admin/structure/entity_example_basic/manage' is defined in our hook_menu below
          'path'             => 'admin/structure/entity_example_basic/manage',
          'access arguments' => array('administer entity_example_basic entities'),
        ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    // This is handled in entity_example_basic_view($entity, $view_mode = 'tweaky') below
    'view modes' => array(
      'tweaky' => array(
        'label'           => t('Tweaky'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  return $info;
}


/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * entity_example_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: examples/entity_example/basic/%entity_example_basic in
 * hook_menu() tells Drupal to call entity_example_basic_load().
 *
 * @param $basic_id
 *   Integer specifying the basic entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see entity_example_basic_load_multiple()
 * @see entity_example_menu()
 */
// In other words, Drupal (from D5 or earlier) has a function naming convention
// whereby object_LOAD is called when you have a positional URL parameter of
// form /%object (note '%').  This provides the object_LOAD which then calls
// the new (D7) function of form object_LODA_MULTIPLE
function entity_example_basic_load($basic_id = NULL, $reset = FALSE) {
  $basic_ids = (isset($basic_id) ? array($basic_id) : array());
  $basic = entity_example_basic_load_multiple($basic_ids, $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function entity_example_basic_load_multiple($basic_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('entity_example_basic', $basic_ids, $conditions, $reset);
}


/**
 * Implements hook_menu().
 */
function entity_example_menu() {
  $items['examples/entity_example'] = array(
    'title'            => 'Entity Example',
    'page callback'    => 'entity_example_info_page',     // Defined below
    'access arguments' => array('view any entity_example_basic entity'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/entity_example_basic/manage'] = array(
    'title'            => 'Administer entity_example_basic entity type',
    'page callback'    => 'entity_example_basic_admin_page',                 // Defined below
    'access arguments' => array('administer entity_example_basic entities'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  // Since using %entity_example_basic arg we do an automatic call to entity_example_basic_load
  // and pass that as an arg to 'page callback' entity_example_basic_view
  // ArgNums: 0          1           2        3
  $items['examples/entity_example/basic/%entity_example_basic'] = array(
    'title callback'   => 'entity_example_basic_title',                 // Defined below
    'title arguments'  => array(3),    // %entity_example_basic
    'page callback'    => 'entity_example_basic_view',                  // View is default local task below
    'page arguments'   => array(3),    // %entity_example_basic
    'access arguments' => array('view any entity_example_basic entity'),
  );

  // 'View' tab for an individual entity page.
  $items['examples/entity_example/basic/%entity_example_basic/view'] = array(
    'title'  => 'View',
    'type'   => MENU_DEFAULT_LOCAL_TASK,   // Default local task for path examples/entity_example/basic/%entity_example_basic
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  //  ArgNum  0          1          2           3
  $items['examples/entity_example/basic/%entity_example_basic/edit'] = array(
    'title'            => 'Edit',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('entity_example_basic_form', 3),          // Defined below, 3 is URL arg number => passes loaded object
    'access arguments' => array('edit any entity_example_basic entity'),
    'type'             => MENU_LOCAL_TASK,
  );

  // Add example entities.
  $items['examples/entity_example/basic/add'] = array(
    'title'            => 'Add an Entity Example Basic Entity',
    'page callback'    => 'entity_example_basic_add',                    // Defined below. No magic-arg-loaded-obj since we're adding new
    'access arguments' => array('create entity_example_basic entities'),
  );

  return $items;
}

/**
 * Basic information for the page.
 */
function entity_example_info_page() {
  $content['preface'] = array(
    '#type'   => 'item',
    '#markup' => t('The entity example provides a simple example entity.')
  );
  if (user_access('administer entity_example_basic entities')) {
    $content['preface']['#markup'] =  t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/entity_example_basic/manage'))
    );
  }
  $content['table'] = entity_example_basic_list_entities();  // defined below

  return $content;
}


/**
 * Returns a render array with all entity_example_basic entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function entity_example_basic_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = entity_example_basic_load_multiple();      // Defined above
  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id'               => $entity->basic_id,
          'item_description' => l($entity->item_description, 'examples/entity_example/basic/' . $entity->basic_id),
          'bundle'           => $entity->bundle_type,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme'  => 'table',
      '#rows'   => $rows,
      '#header' => array(t('ID'), t('Item Description'), t('Bundle')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type'   => 'item',
      '#markup' => t('No entity_example_basic entities currently exist.'),
    );
  }
  return $content;
}



/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function entity_example_basic_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  // Call the ->create() method we define in class EntityExampleBasicController below.
  $entity = entity_get_controller('entity_example_basic')->create();
  return drupal_get_form('entity_example_basic_form', $entity);      // 'entity_example_basic_form' defined below
}

/**
 * Form function to create an entity_example_basic entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function entity_example_basic_form($form, &$form_state, $entity) {
  $form['item_description'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Item Description'),
    '#required'      => TRUE,
    '#default_value' => $entity->item_description,  // 'item_description' is a field in our data table from .install file
  );

  $form['basic_entity'] = array(
    '#type'  => 'value',
    '#value' => $entity,            // I don't know what this is or does.
  );

  // field_attach_form will "Add form elements for all fields for an entity to a form structure."
  field_attach_form('entity_example_basic', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type'   => 'submit',
    '#value'  => t('Delete'),
    '#submit' => array('entity_example_basic_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}


/**
 * Validation handler for entity_example_basic_add_form form.
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
// I'm not sure what kind of validation we get from the Field API in this case.
// Even without this validation handler we still must put in an entry (require)
// Since the field is text, I don't see much validation either.
function entity_example_basic_form_validate($form, &$form_state) {
  field_attach_form_validate('entity_example_basic', $form_state['values']['basic_entity'], $form, $form_state);
}


/**
 * Form submit handler: submits basic_add_form information
 */
function entity_example_basic_form_submit($form, &$form_state) {
  // Does this next line return an object - from a form?? Apparently...
  $entity = $form_state['values']['basic_entity'];
  $entity->item_description = $form_state['values']['item_description'];
  field_attach_submit('entity_example_basic', $entity, $form, $form_state);
  // 'entity_example_basic_save() defined below
  $entity = entity_example_basic_save($entity);
  // Move from 'add' page to 'view' page for that new basic_id
  $form_state['redirect'] = 'examples/entity_example/basic/' . $entity->basic_id;
}


/**
 * We save the entity by calling the controller.
 */
// This will save a row to table entity_example_basic with columns
//   basic_id (int)    bundle_type ('first_example_bundle')    item_description (text)     created (Unix ts int)
function entity_example_basic_save(&$entity) {
  return entity_get_controller('entity_example_basic')->save($entity);
}


/**
 * EntityExampleBasicControllerInterface definition.
 *
 * We create an interface here because anyone could come along and
 * use hook_entity_info_alter() to change our controller class.
 * We want to let them know what methods our class needs in order
 * to function with the rest of the module, so here's a handy list.
 *
 * @see hook_entity_info_alter()
 */

interface EntityExampleBasicControllerInterface
  extends DrupalEntityControllerInterface {
  public function create();
  public function save($entity);
  public function delete($entity);
}


/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 *
 * Our subclass of DrupalDefaultEntityController lets us add a few
 * important create, update, and delete methods.
 */
class EntityExampleBasicController
  extends DrupalDefaultEntityController
  implements EntityExampleBasicControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type             = 'entity_example_basic';
    $entity->basic_id         = 0;
    $entity->bundle_type      = 'first_example_bundle';
    $entity->item_description = '';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record()
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
    if (empty($entity->basic_id)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    // I think we need to invoke this to allow other modules to jump into the
    // 'entity_presave' event. This is all part of playing nicely in Drupal Land.
    module_invoke_all('entity_presave', 'entity_example_basic', $entity);
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->basic_id ? 'basic_id' : array();
    // Write out the entity record.
    // There doesn't seem to be much in the way here of data validation. How do
    // we know that the incoming $entity is valid?  Also, there's no try/catch
    // or transaction here (unliess in drupal_write_record) so this seems
    // rather dodgy.  OK for a light-weight example, but maybe not best practice.
    // $primary_keys seems to be an array, so can we write multiple entities with this?
    // Note below in delete_multiple($entities) we have a try/catch and transaction
    drupal_write_record('entity_example_basic', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    // Call to 'field_attach' So does this mean every 'column' in my entity will
    // become a full Drupal 'field' (and by 'field' I mean full table in the db)
    if (empty($primary_keys)) {
      field_attach_insert('entity_example_basic', $entity);  // defined in CORE modules/field/field.attach.inc
    }
    else {
      field_attach_update('entity_example_basic', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, 'entity_example_basic', $entity);
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for delete_multiple().
   */
  public function delete($entity) {
    $this->delete_multiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   *
   * Deletion is unfortunately not supported in the base
   * DrupalDefaultEntityController class.
   *
   * @param $basic_ids
   *   An array of entity IDs or a single numeric ID.
   */
  public function delete_multiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          module_invoke_all('entity_example_basic_delete', $entity);
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'entity_example_basic');
          field_attach_delete('entity_example_basic', $entity);
          $basic_ids[] = $entity->basic_id;
        }
        db_delete('entity_example_basic')
          ->condition('basic_id', $basic_ids, 'IN')
          ->execute();

      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('entity_example', $e);
        throw $e;
      }
    }
  }
}  // class EntityExampleBasicController